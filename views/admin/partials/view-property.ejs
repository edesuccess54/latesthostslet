<style>
    .action-td {
        display: flex;
        gap: 20px;
    }


    .edit-icon a{
        font-size: 18px;
    }
</style>
<div style="margin-top: 20px;">
   <table id="property" class="display" style="width:100%">
        <thead>
            <tr>
                <th>Name</th>
                <th>Location</th>
                <th>Amount</th>
                <th>Category</th>
                <th>Review</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody class="product-action">
            <% if(propertys) { %>
                <% propertys?.map(({_id, pname, plocation, pamount, pcategory}) => { %>
                    <tr>
                        <td><%= pname %></td>
                        <td><%= plocation %></td>
                        <td>$<%= Number(pamount).toLocaleString() %></td>
                        <td><%= pcategory %></td>
                        <td>
                            <span><a href="/auth/admin/review?hostslet=<%= randomString1 %>&host=<%= randomString2 %>&property=<%= _id %>">Add review</a></span>
                        </td>
                        <td>
                           <div class="action-td">
                                <span class="edit-icon">
                                    <a href="/auth/admin/edit?hostslet=<%= randomString1 %>&host=<%= randomString2 %>&property=<%= _id %>">
                                        <i class="fa-solid fa-pen-to-square"></i>
                                    </a>
                                </span>
                                <button class="trash-btn">
                                    <i class="fa-solid fa-trash trash" data-id="<%= _id %>"></i>
                                </button>
                           </div>
                        </td>
                    </tr>
                <%}) %>
            <% } %>
        </tbody>
    </table>
</div>



<script type="module">
    import {notification, showSpinner, hideSpinner, closeNotification} from '/main/js/notification.js';
    toastBtn.addEventListener('click', () => closeNotification(toast));

    const productAction = document.querySelector('.product-action');
    
    // delete product 
    const deleteProduct = async(e) => {
        if(e.target.classList.contains("trash")) {
            Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#ff385c',
            confirmButtonText: 'Yes, delete it!'
            }).then(async (result) => {
                if (result.isConfirmed) {

                    const transhBtn = e.target.parentNode
            
                    try {
                        showSpinner(transhBtn)
                        const propertyId = e.target.dataset.id;


                        const response = await fetch(`/auth/admin/delete/${propertyId}`, {
                            method: "DELETE",
                            headers: {"Content-Type" : "application/json"}
                        })

                        if(!response.ok) {
                            throw new Error("something went wrong, please try again")
                        }

                        const json = await response.json();

                        if(json.error) {
                            throw new Error(json.error)
                        }

                        if(json.success) {
                            showSpinner(transhBtn, '<i class="fa-solid fa-trash trash" data-id=""></i>')
                            notification.error(json.message, toast, toastIcon, toastMessage, closeNotification);

                            setTimeout(() => {
                                location.reload()
                            },3000)
                        }

                    } catch(error) {
                        showSpinner(transhBtn, '<i class="fa-solid fa-trash trash" data-id=""></i>')
                        notification.error(error.message, toast, toastIcon, toastMessage, closeNotification);

                        setTimeout(() => {
                            location.reload()
                        },3000)
                    }
                }

            })
        }
    }
    productAction.addEventListener('click', deleteProduct);

    $(document).ready(function () {
        $('#property').DataTable({
            scrollX: true,
        });
    });
</script>
