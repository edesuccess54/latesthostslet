

<style>

    .modal_wrapper {
        position: fixed;
        display: none;
        align-items: center; 
        background: rgba(0, 0, 0, 0.5);
        top: 0;
        width: 100%;
        height: 100%;
        z-index: 99999;
    }
    .modal_wrapper.show {
        display: flex;
    }

    .modal_container {
        max-width: 320px;
        border-radius: 5px;
        margin: auto;
        background: #fff;
        overflow-y: scroll;
        /* max-height: 400px; */
    }

    .modal_container::-webkit-scrollbar {
        display: none;
    }

    .modal_content {
        padding: 20px;
    }

    .image_proof {
        position: relative;
        width: 100%;
        height: 400px;
        background: green;
    }

    .image_proof img {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
    }

    .close_proof_modal {
        position: absolute;
        right: 20px;
        top: 20px;
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 5px;
        width: 30px;
        height: 30px;
        text-align: center;
        border-radius: 50%;
        background: gray;
    }

    .pay_modal_btn {
        color: #fff;
        cursor: pointer;
        font-size: 20px;
    }

    @media screen and (min-width: 768px) {
        .modal_container {
            max-width: 600px;
        }
    }
</style>

    <div class="modal_wrapper">
        <div class="modal_container">
            <div class="modal_content">
                <div class="image_proof">
                    
                </div>
            </div>
        </div>
    </div>


    <!-- display all property section  -->
    <section class="table_section" style="margin-top: 40px;">
        <table id="withdraw" class="display" style="width:100%">
            <thead>
                <tr>
                    <th>Amount</th>
                    <th>Method</th>
                    <th>Address</th>
                    <th>Time</th>
                    <th>status</th>
                    <th>action</th>
                </tr>
            </thead>
            <tbody class="withdrawal_action_tab">
                <% if(withdraws.length > 0) { %>
                    <% for(let i = 0; i < withdraws.length ; i++) { %>
                        <tr>
                            <td>$<%= Number(withdraws[i].amount).toLocaleString() %> </td>
                            <td><%= withdraws[i].method %></td>
                            <td>
                                <p><%= withdraws[i].wallet %></p>
                            </td>
                            <td><%= withdraws[i].datetime %></td>
                            <td>
                                <% if(withdraws[i].status) { %>
                                    <p class="completed">Approved</p>
                                <%} else { %>
                                    <p class="pending"><%= withdraws[i].statusMessage === 'Rejected'? 'Rejected' : 'Pending' %></p>
                                <% } %>
                                
                                </td>
                            <td>
                                <button class="action_btn accept" style="background: green;" data-paymentid="<%= withdraws[i]._id %>">Approve</button>
                                <button class="action_btn reject" data-paymentid="<%= withdraws[i]._id %>">Reject</button>
                            </td>
                        </tr>
                <%  }
                } %> 

            </tbody>
        </table>

    </section>


<script type="module">
    import {notification, showSpinner, hideSpinner, closeNotification} from '/main/js/notification.js';
    toastBtn.addEventListener('click', () => closeNotification(toast));

    const modalWrapper = document.querySelector('.modal_wrapper');
    const withdrawwalActionTab = document.querySelector('.withdrawal_action_tab');

    
    // function to approve user payment 
    const approveWithdrawal = async (e) => {
        try {
            const paymentId = e.target.dataset.paymentid;
            
            if(e.target.classList.contains('accept')) {
                
                showSpinner(e.target)

                const response = await fetch(`/auth/admin/approve-withdraw/${paymentId}`, {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify()
                })

                if(!response.ok) {
                    throw new Error('something went wrong, please try again')
                }
                const json = await response.json();

                if(json.error) {
                    throw new Error(json.Error)
                }

                if(json.success) {
                    hideSpinner(e.target, "Approve")
                    notification.success(json.message, toast, toastIcon, toastMessage, closeNotification);
                    location.reload()
                }

            } else if(e.target.classList.contains('reject')) {

                showSpinner(e.target)
                
                const response = await fetch(`/auth/admin/reject-withdraw/${paymentId}`, {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify()
                })

                if(!response.ok) {
                    throw new Error('something went wrong, please try again')
                }
                const json = await response.json();

                if(json.error) {
                    throw new Error(json.Error)
                }

                if(json.success) {
                    hideSpinner(e.target, "Reject")
                    notification.error(error.message, toast, toastIcon, toastMessage, closeNotification);
                    location.reload()
                }
            }
            
        } catch (error) {
            if(e.target.classList.contains('accept')) {
                hideSpinner(e.target, "Approve")
                notification.error(error.message, toast, toastIcon, toastMessage, closeNotification);
            } else {
                hideSpinner(e.target, "Reject")
                notification.error(error.message, toast, toastIcon, toastMessage, closeNotification);
            }
        }
    }

    withdrawwalActionTab.addEventListener('click', approveWithdrawal)

</script>
    
